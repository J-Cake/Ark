graph TD
    tokens((Tokens)) --> isNumber{Token is a number}
    isNumber --> |Yes| output[Push Token to Output Queue]
    output --> tokens
    isNumber --> |No| isFunctionCall{Token is a function call}
    isFunctionCall --> |Yes| opstack[Push Token to Operator Stack]
    opstack --> tokens
    isFunctionCall --> |No| isOperator{Token is operator}

    isOperator --> |Yes| opOnTop{Top of OpStack is operator}
        opOnTop --> |Yes| precedence{Top of OpStack precedence is greater}
        opOnTop --> |No| isLeftParenthesis{Top of OpStack is left parenthesis}
        precedence --> |Yes| pop[Pop Operator from top of op stack]
        pop --> out[Push to Output Queue]
        out --> opOnTop
        precedence --> |No| equalPrecedence{Top of OpStack precedence is equal}
            associative --> |Yes| pop
            equalPrecedence --> |Yes| associative{Top of OpStack is Left Associative}

            isLeftParenthesis --> |No| pop
            isLeftParenthesis --> |Yes| opstack
    
    associative --> |No| opstack
    equalPrecedence --> |No| opstack
    
    isOperator --> |No| isLeft{Token is a Left Parenthesis}
    isLeft --> |Yes| opstack
    isLeft --> |No| isRight{Token is a Right Parenthesis}
    
    isRight --> |Yes| opStackTop{Top of OpStack is left parenthesis}
        opStackTop --> |No| pop2[Pop Operator from top of op stack]
        pop2 --> opStackTop
        opStackTop --> |Yes| discard[Discard OpStack Top if its a left parenthesis]
        discard --> tokens
        opStackTop --> |Is Empty| error((Bracket Mismatch))

    isRight --> |No| error((Syntax Error))